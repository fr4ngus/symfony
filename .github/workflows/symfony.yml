name: Symfony

env:
    MIN_PHP: 7.2.5
    SYMFONY_PROCESS_PHP_TEST_BINARY: ~/.phpenv/shims/php
    MESSENGER_AMQP_DSN: amqp://localhost/%2f/messages
    MESSENGER_REDIS_DSN: redis://127.0.0.1:7006/messages
    MESSENGER_SQS_DSN: sqs://localhost:9494/messages?sslmode=disable
    SYMFONY_PHPUNIT_DISABLE_RESULT_CACHE: 1

on:
    push:
        branches: [ github-actions ]
    pull_request:
        branches: [ master ]

jobs:
    build:
        runs-on: ${{ matrix.os }}
        services:
            couchbase:
                image: couchbase:6.0.1
                ports:
                    - 8091-8094:8091-8094
                    - 11210:11210
                options: >-
                    --name couchbase
            redis:
                image: redis:latest
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
            redis-cluster:
                image: grokzen/redis-cluster:5.0.4
                ports:
                    - 7000:7000
                    - 7001:7001
                    - 7002:7002
                    - 7003:7003
                    - 7004:7004
                    - 7005:7005
                    - 7006:7006
                    - 7007:7007
                options: >-
                    --env STANDALONE="true"
                    --name redis-cluster
            sqs:
                image: feathj/fake-sqs
                ports:
                    - 9494:9494
                options: >-
                    --name sqs
            zookeeper:
                image: wurstmeister/zookeeper:3.4.6
                options: >-
                    --name zookeeper
            kafka:
                image: wurstmeister/kafka:2.12-2.3.1
                ports:
                    - 9092:9092
                options: >-
                    --env KAFKA_AUTO_CREATE_TOPICS_ENABLE="false"
                    --env KAFKA_CREATE_TOPICS="test-topic:1:1:compact"
                    --env KAFKA_ADVERTISED_HOST_NAME="kafka"
                    --env KAFKA_ZOOKEEPER_CONNECT="zookeeper:2181"
                    --env KAFKA_ADVERTISED_PORT="9092"
                    --name kafka
            ldap:
                image: osixia/openldap:1.3.0
                ports:
                    - 3389:3389
                options: >-
                    --env LDAP_DOMAIN="symfony.com"
                    --env LDAP_ADMIN_PASSWORD="symfony"
                    --env LDAP_BACKEND="hdb"
                    --name ldap
            memcached:
                image: memcached
                ports:
                    - 11211:11211
        strategy:
            matrix:
                os: [ubuntu-latest]
                php-versions: ['7.2', '7.3', '7.4']
                include:
                    -   php-versions: '7.2'
                        php_extra: '7.4'
                        deps: ''
                    -   php-versions: '7.3'
                        php_extra: ''
                        deps: 'high'
                    -   php-versions: '7.4'
                        php_extra: ''
                        deps: 'low'
        name: PHP ${{ matrix.php-versions }}
        env:
            php_extra: ${{ matrix.php_extra }}
            deps: ${{ matrix.deps }}
            PHP: ${{ matrix.php-versions }}
            extensions: mbstring, intl, ctype, iconv, xml, ctype, apcu, mysql, mongodb, igbinary, zookeeper, amqp, rdkafka, redis, couchbase, apcu
            REDIS_CLUSTER_HOSTS: 'localhost:7000 localhost:7001 localhost:7002 localhost:7003 localhost:7004 localhost:7005'
            KAFKA_BROKER: kafka:9092
            key: cache-v2
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  ref: github-actions
                  fetch-depth: '2'
            - name: Setup cache environment
              id: cache-env
              uses: shivammathur/cache-extensions@v1
              with:
                  php-version: ${{ matrix.php-versions }}
                  extensions: ${{ env.extensions }}
                  key: ${{ env.key }}
            - name: Cache PHP extensions
              uses: actions/cache@v1
              with:
                  path: ${{ steps.cache-env.outputs.dir }}
                  key: ${{ steps.cache-env.outputs.key }}
                  restore-keys: ${{ steps.cache-env.outputs.key }}
            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-versions }}
                  tools: php-cs-fixer, phpunit, pecl
                  extensions: ${{ env.extensions }}
                  ini-values: post_max_size=256M, short_open_tag=On, date.timezone=Europe/Paris, memory_limit=-1, session.gc_probability=0, opcache.enable_cli=1,apc.enable_cli=1
            -   name: Get composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"
            -   name: Cache dependencies
                uses: actions/cache@v1
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                    restore-keys: ${{ runner.os }}-composer-
            -   name: CI Symfony
                run:    |
                    echo ::group::Enable extra ppa
                    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157
                    sudo add-apt-repository -y ppa:ondrej/php
                    sudo rm /etc/apt/sources.list.d/google-chrome.list
                    sudo rm /etc/apt/sources.list.d/mongodb-3.4.list || true
                    sudo wget -O - http://packages.couchbase.com/ubuntu/couchbase.key | sudo apt-key add -
                    echo "deb http://packages.couchbase.com/ubuntu xenial xenial/main" | sudo tee /etc/apt/sources.list.d/couchbase.list
                    sudo apt update
                    sudo apt install -y libcouchbase-dev librabbitmq-dev libsodium-dev php-uuid zlib1g-dev
                    echo ::endgroup::


                    echo ::group::Start Kafka and install an up-to-date librdkafka
                    sudo sh -c 'echo "\n127.0.0.1  kafka\n" >> /etc/hosts'
                    mkdir /tmp/librdkafka
                    curl https://codeload.github.com/edenhill/librdkafka/tar.gz/v0.11.6 | tar xzf - -C /tmp/librdkafka
                    (cd  /tmp/librdkafka/librdkafka-0.11.6 && ./configure && make && sudo make install)
                    echo ::endgroup::


                    echo ::group::Create new Couchbase Cluster and Bucket ephemeral
                    docker exec couchbase /opt/couchbase/bin/couchbase-cli cluster-init -c localhost:8091 --cluster-username=Administrator --cluster-password=111111 --cluster-ramsize=256
                    docker exec couchbase /opt/couchbase/bin/couchbase-cli bucket-create -c localhost:8091 --bucket=cache --bucket-type=ephemeral --bucket-ramsize=100 -u Administrator -p 111111
                    echo ::endgroup::

                    echo ::group::Copy files to openldap
                    docker cp /home/runner/work/symfony/symfony/src/ ldap:/tmp/
                    echo ::endgroup::


                    echo ::group::General configuration
                    set -e

                    export PHPUNIT=$(readlink -f ./phpunit)
                    export PHPUNIT_X="$PHPUNIT --exclude-group tty,benchmark,intl-data"
                    export COMPOSER_UP='composer update --no-progress --no-suggest --ansi'
                    export COMPONENTS=$(find src/Symfony -mindepth 2 -type f -name phpunit.xml.dist -printf '%h\n' | sort)
                    export COMPOSE_INTERACTIVE_NO_CLI=1

                    # gfold is a helper to create folded reports
                    gfold () {
                    local title="🐘$PHP $1"
                    local fold=$(echo $title | sed -r 's/[^-_A-Za-z0-9]+/./g')
                    shift
                    echo ::group::$fold
                    bash -xc "$*" 2>&1
                    local ok=$?
                    (exit 0)
                    echo ::endgroup::
                    }
                    export -f gfold
                    echo ::endgroup::

                    echo ::group::List all php extensions with versions
                    php -r 'foreach (get_loaded_extensions() as $extension) echo $extension . " " . phpversion($extension) . PHP_EOL;'
                    echo ::endgroup::


                    echo ::group::Load fixtures
                    if [[ ! $skip ]]; then
                        docker exec ldap ldapadd -h localhost -D cn=admin,dc=symfony,dc=com -w symfony -f /tmp/src/Symfony/Component/Ldap/Tests/Fixtures/data/fixtures.ldif
                    fi
                    echo ::endgroup::


                    echo ::group::Install the phpunit-bridge from a PR if required
                    # To run a PR with a patched phpunit-bridge, first submit the patch for the
                    # phpunit-bridge as a separate PR against the next feature-branch then
                    # uncomment and update the following line with that PR number
                    #SYMFONY_PHPUNIT_BRIDGE_PR=32886

                    if [[ $SYMFONY_PHPUNIT_BRIDGE_PR ]]; then
                        git fetch --depth=2 origin refs/pull/$SYMFONY_PHPUNIT_BRIDGE_PR/head
                        git rm -rq src/Symfony/Bridge/PhpUnit
                        git checkout -q FETCH_HEAD -- src/Symfony/Bridge/PhpUnit
                        export SYMFONY_VERSION=$(cat src/Symfony/Bridge/PhpUnit/composer.json | grep '^ *"dev-master". *"[1-9]' | grep -o '[0-9.]*')
                        sed -i 's/"symfony\/phpunit-bridge": ".*"/"symfony\/phpunit-bridge": "'$SYMFONY_VERSION'.x@dev"/' composer.json
                        rm -rf .phpunit
                    fi
                    echo ::endgroup::

                    echo ::group::Create local composer packages for each patched components and reference them in composer.json files when cross-testing components
                    git config --global user.email ""
                    git config --global user.name "Symfony"

                    if [[ ! $deps ]]; then
                        php .github/build-packages.php HEAD^ src/Symfony/Bridge/PhpUnit src/Symfony/Contracts
                    else
                        export SYMFONY_DEPRECATIONS_HELPER=weak &&
                        cp composer.json composer.json.orig &&
                        echo -e '{\n"require":{'"$(grep phpunit-bridge composer.json)"'"php":"*"},"minimum-stability":"dev"}' > composer.json &&
                        php .github/build-packages.php HEAD^ $(find src/Symfony -mindepth 3 -type f -name composer.json -printf '%h\n' | sort) &&
                        mv composer.json composer.json.phpunit &&
                        mv composer.json.orig composer.json
                    fi
                    if [[ $SYMFONY_PHPUNIT_BRIDGE_PR ]]; then
                        git rm -fq -- src/Symfony/Bridge/PhpUnit/composer.json
                        git diff --staged -- src/Symfony/Bridge/PhpUnit/ | git apply -R --index
                    fi

                    echo ::endgroup::


                    echo ::group::For the master branch, when deps=high, the version before master is checked out and tested with the locally patched components
                    if [[ $deps = high && ${GITHUB_REF##*/} = master ]]; then
                        export FLIP='🙃'
                        export SYMFONY_VERSION=$(git ls-remote --heads | grep -o '/[1-9].*' | tail -n 1 | sed s/.//) &&
                        git fetch --depth=2 origin $SYMFONY_VERSION &&
                        git checkout -m FETCH_HEAD &&
                        export COMPONENTS=$(find src/Symfony -mindepth 2 -type f -name phpunit.xml.dist -printf '%h\n' | sort)
                    else
                        export SYMFONY_VERSION=$(cat composer.json | grep '^ *"dev-master". *"[1-9]' | grep -o '[0-9.]*')
                    fi
                    echo ::endgroup::


                    echo ::group::Skip the phpunit-bridge on not-master branches when $deps is empty
                    if [[ ! $deps && ${GITHUB_REF##*/} != master ]]; then
                    export COMPONENTS=$(find src/Symfony -mindepth 3 -type f -name phpunit.xml.dist -not -wholename '*/Bridge/PhpUnit/*' -printf '%h\n' | sort)
                    fi
                    echo ::endgroup::


                    echo ::group::Install symfony/flex
                    if [[ $deps = low ]]; then
                        export SYMFONY_REQUIRE='>=3.4'
                    else
                        export SYMFONY_REQUIRE=">=$SYMFONY_VERSION"
                    fi
                    composer global require --no-progress --no-scripts --no-plugins symfony/flex dev-master
                    echo ::endgroup::


                    echo ::group::Legacy tests are skipped when deps=high and when the current branch version has not the same major version number as the next one
                    [[ $deps = high && ${SYMFONY_VERSION%.*} != $(git show $(git ls-remote --heads | grep -FA1 /$SYMFONY_VERSION | tail -n 1):composer.json | grep '^ *"dev-master". *"[1-9]' | grep -o '[0-9]*' | head -n 1) ]] && export LEGACY=,legacy
                    export COMPOSER_ROOT_VERSION=$SYMFONY_VERSION.x-dev
                    if [[ $deps ]]; then mv composer.json.phpunit composer.json; fi
                    echo ::endgroup::


                    echo ::group::php info
                    php -i
                    echo ::endgroup::


                    echo ::group::Run tests
                    set -e

                    if [[ $PHP != 7.4* && $PHP != ${{ matrix.php-versions }} ]]; then
                    echo -e "\\n\\e[33;1mIntermediate PHP version $PHP is skipped for pull requests.\\e[0m"
                    return
                    fi

                    ([[ $deps ]] && cd src/Symfony/Component/HttpFoundation; cp composer.json composer.bak; composer config platform.ext-mongodb 1.6.0; composer require --dev --no-update mongodb/mongodb ~1.5.0)
                    gfold 'composer update' $COMPOSER_UP
                    gfold 'phpunit install' ./phpunit install
                    if [[ $deps = high ]]; then
                        echo "$COMPONENTS" | parallel --gnu "gfold {} 'cd {} && $COMPOSER_UP && $PHPUNIT_X$LEGACY'" || X=1
                    elif [[ $deps = low ]]; then
                        php .github/rm-invalid-lowest-lock-files.php $COMPONENTS
                        echo "$COMPONENTS" | parallel --gnu "gfold {} 'cd {} && ([ -e composer.lock ] && ${COMPOSER_UP/update/install} || $COMPOSER_UP --prefer-lowest --prefer-stable) && $PHPUNIT_X'"
                    else
                        if [[ $PHP = 7.4* ]]; then
                            # add return types before running the test suite
                            rm src/Symfony/Contracts -Rf && mv vendor/symfony/contracts src/Symfony/Contracts
                            ln -sd $(realpath src/Symfony/Contracts) vendor/symfony/contracts
                            sed -i 's/"\*\*\/Tests\/"//' composer.json
                            composer install --optimize-autoloader
                            SYMFONY_PATCH_TYPE_DECLARATIONS=force=object php .github/patch-types.php
                            SYMFONY_PATCH_TYPE_DECLARATIONS=force=object php .github/patch-types.php # ensure the script is idempotent
                            PHPUNIT_X="$PHPUNIT_X,legacy"
                        fi


                        echo "$COMPONENTS" | parallel --gnu "gfold {} $PHPUNIT_X {}"
                    fi
                    echo ::endgroup::
